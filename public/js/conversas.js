// Vari√°veis globais para conversas
let conversasAtivas = false;
let saldoAtual = 0;
let numeroAtual = null;

// Elementos do DOM
const statusConversasElement = document.getElementById('status-conversas');

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Atualizar status inicial
    atualizarStatusConversas('Aguardando conex√£o...');
});

// Fun√ß√£o para atualizar status das conversas
function atualizarStatusConversas(status) {
    if (statusConversasElement) {
        statusConversasElement.textContent = status;
    }
}

// Fun√ß√£o para iniciar conversas automaticamente (chamada pelo backend)
async function iniciarConversasAutomaticas(browserId, numero) {
    try {
        console.log('Iniciando conversas autom√°ticas para:', numero);
        
        const response = await fetch('/conversas/iniciar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                browserId: browserId,
                numero: numero
            })
        });

        const data = await response.json();
        
        if (data.success) {
            conversasAtivas = true;
            atualizarStatusConversas('üîÑ Ativo - Conversando...');
            console.log('Conversas autom√°ticas iniciadas com sucesso!');
        } else {
            atualizarStatusConversas('‚ùå Erro ao iniciar conversas');
            console.error('Erro ao iniciar conversas:', data.message);
        }
    } catch (error) {
        console.error('Erro ao iniciar conversas autom√°ticas:', error);
        atualizarStatusConversas('‚ùå Erro na conex√£o');
    }
}

// Fun√ß√£o para parar conversas (mantida para compatibilidade, mas n√£o usada no front-end)
async function pararConversas() {
    // Fun√ß√£o mantida para compatibilidade com o backend
    console.log('Fun√ß√£o pararConversas chamada - n√£o implementada no front-end');
}

// Fun√ß√£o removida - cr√©dito √© adicionado manualmente no banco de dados

// Fun√ß√µes removidas - n√£o s√£o mais necess√°rias com a nova implementa√ß√£o

// Fun√ß√£o removida - n√£o √© mais necess√°ria

// Mostrar notifica√ß√£o
function mostrarNotificacao(mensagem, tipo = 'info') {
    // Remover notifica√ß√£o anterior se existir
    const notificacaoExistente = document.querySelector('.notification');
    if (notificacaoExistente) {
        notificacaoExistente.remove();
    }

    // Criar nova notifica√ß√£o
    const notificacao = document.createElement('div');
    notificacao.className = `notification ${tipo}`;
    notificacao.textContent = mensagem;
    
    document.body.appendChild(notificacao);
    
    // Remover ap√≥s 5 segundos
    setTimeout(() => {
        if (notificacao.parentNode) {
            notificacao.remove();
        }
    }, 5000);
}

// Fun√ß√µes removidas - n√£o s√£o mais necess√°rias com a nova implementa√ß√£o

// Exportar fun√ß√µes para uso global
window.conversasAutomaticas = {
    iniciarConversasAutomaticas,
    pararConversas,
    atualizarStatusConversas
};
